upstream {{ nginx_app_name }}_server {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response (in case the Unicorn master nukes a
    # single worker for timing out).
    server unix:{{ venv_dir }}/run/gunicorn.sock fail_timeout=0;
}

server {
    listen 80;
    server_name {{ hostname }};
    client_max_body_size 4G;

    access_log {{ nginx_access_log_file }};
    error_log {{ nginx_error_log_file }};
	
    location /static/ {
        autoindex on;
        expires 1h;
        alias   {{ nginx_static_dir }};
    } 
    
    location /media/ {
        autoindex on;
        expires 1h;
        alias {{ nginx_media_dir }};
    }

    location ~ /api$ { return 302 http://{{hostname}}/api/;}
	
    location /api/ {
        # an HTTP header important enough to have its own Wikipedia entry:
        #   http://en.wikipedia.org/wiki/X-Forwarded-For
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # enable this if and only if you use HTTPS, this helps Rack
        # set the proper protocol for doing redirects:
        # proxy_set_header X-Forwarded-Proto https;

        # pass the Host: header from the client right along so redirects
        # can be set properly within the Rack application
        proxy_set_header Host $http_host;

        proxy_set_header SCRIPT_NAME /api;
        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;

        # set "proxy_buffering off" *only* for Rainbows! when doing
        # Comet/long-poll stuff.  It's also safe to set if you're
        # using only serving fast clients with Unicorn + nginx.
        # Otherwise you _want_ nginx to buffer responses to slow
        # clients, really.
        # proxy_buffering off;

        # Try to serve static files from nginx, no point in making an
        # *application* server like Unicorn/Rainbows! serve static files.
        if (!-f $request_filename) {
            proxy_pass http://{{ nginx_app_name }}_server;
            break;
        }
    }

}
