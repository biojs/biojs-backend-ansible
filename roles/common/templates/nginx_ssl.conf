upstream {{ nginx_app_name }}_server {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response (in case the Unicorn master nukes a
    # single worker for timing out).
    server unix:{{ venv_dir }}/run/gunicorn.sock fail_timeout=0;
}

server {
    listen 80;
    listen [::]:80;
    server_name {{ hostname }} {{ secondary_hostname }};
    return 301 https://{{ hostname }}$request_uri;
}

server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name {{ hostname }} {{ secondary_hostname }};
        client_max_body_size 4G;
        access_log {{ nginx_access_log_file }};
        error_log {{ nginx_error_log_file }};

        ssl_certificate      {{ certbot_output_dir }}/{{ letsencrypt_cert_filename }};
        ssl_certificate_key  {{ certbot_output_dir }}/{{ letsencrypt_privkey_filename }};

        # Improve HTTPS performance with session resumption
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 5m;

        # Enable server-side protection against BEAST attacks
        ssl_prefer_server_ciphers on;
        ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;

        # Disable SSLv3
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

        # Diffie-Hellman parameter for DHE ciphersuites
        # $ sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 4096
        ssl_dhparam /etc/ssl/certs/dhparams.pem;

        # Enable HSTS (https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security)
        add_header Strict-Transport-Security "max-age=63072000; includeSubdomains";

        # Enable OCSP stapling (http://blog.mozilla.org/security/2013/07/29/ocsp-stapling-in-firefox)
        ssl_stapling on;
        ssl_stapling_verify on;
        ssl_trusted_certificate {{ certbot_output_dir }}/{{ letsencrypt_cert_filename }};
        resolver 8.8.8.8 8.8.4.4 valid=300s;
        resolver_timeout 5s;

    # Required for LE certificate enrollment using certbot
    location '/.well-known/acme-challenge' {
        default_type "text/plain";
        root {{ frontend_remote_dir }}/dist/;
    }


    location / {
        autoindex on;
        alias {{ frontend_remote_dir }}/dist/;
    }

    location /backend_static/ {
        autoindex on;
        expires 1h;
        alias   {{ nginx_static_dir }};
    }

    location /backend_media/ {
        autoindex on;
        expires 1h;
        alias {{ nginx_media_dir }};
    }

    location ~ /api$ { return 302 https://{{hostname}}/api/;}

    location /api/ {
        # an HTTP header important enough to have its own Wikipedia entry:
        #   http://en.wikipedia.org/wiki/X-Forwarded-For
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # enable this if and only if you use HTTPS, this helps Rack
        # set the proper protocol for doing redirects:
        # proxy_set_header X-Forwarded-Proto https;

        # pass the Host: header from the client right along so redirects
        # can be set properly within the Rack application
        proxy_set_header Host $http_host;

        proxy_set_header SCRIPT_NAME /api;
        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;

        # set "proxy_buffering off" *only* for Rainbows! when doing
        # Comet/long-poll stuff.  It's also safe to set if you're
        # using only serving fast clients with Unicorn + nginx.
        # Otherwise you _want_ nginx to buffer responses to slow
        # clients, really.
        # proxy_buffering off;

        # Try to serve static files from nginx, no point in making an
        # *application* server like Unicorn/Rainbows! serve static files.
        if (!-f $request_filename) {
            proxy_pass http://{{ nginx_app_name }}_server;
            break;
        }
    }
}